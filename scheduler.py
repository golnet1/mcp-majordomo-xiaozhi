#!/usr/bin/env python3
"""
–§–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è MajorDoMo.
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–ª–∏–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–æ–º–Ω–∞—Ç–∞ –æ—Ç–¥—ã—Ö–∞" –≤ –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏ –∫–æ–ª–æ–Ω–∫–∞—Ö).
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç schedule.json –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏.
"""

import json
import time
import threading
import logging
import os
import sys
import re
from datetime import datetime
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
SCHEDULE_FILE = "/opt/mcp-bridge/schedule.json"
MAJORDOMO_URL = "http://192.168.88.2"
ALIASES_FILE = "/opt/mcp-bridge/device_aliases.json"
LOG_FILE = "/opt/mcp-bridge/logs/actions.log"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=getattr(logging, LOG_LEVEL), format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("Scheduler")

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def load_aliases():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–ª–∏–∞—Å—ã –∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∫–ª—é—á–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"—É–ª–∏—Ü–∞": [spec1], "–∫–æ–º–Ω–∞—Ç–∞ –æ—Ç–¥—ã—Ö–∞": [spec_–æ—Å–≤–µ—â–µ–Ω–∏–µ, spec_–∫–æ–ª–æ–Ω–∫–∏]}
    """
    if not os.path.exists(ALIASES_FILE):
        logger.warning(f"–§–∞–π–ª –∞–ª–∏–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {ALIASES_FILE}")
        return {}

    try:
        with open(ALIASES_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)

        aliases = {}
        for category, devices in raw.items():
            for key, spec in devices.items():
                names = [name.strip().lower() for name in key.split(",")]
                for name in names:
                    if name:
                        if name not in aliases:
                            aliases[name] = []
                        aliases[name].append({
                            "object": spec["object"],
                            "property": spec["property"],
                            "category": category
                        })
        return aliases
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–∏–∞—Å–æ–≤: {e}")
        return {}

def normalize_query(query: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–∞–ø—Ä–æ—Å (–∫–∞–∫ –≤ MCP-—Å–µ—Ä–≤–µ—Ä–µ)."""
    query = query.lower().strip()
    patterns = [
        r'^(—Å–≤–µ—Ç|–æ—Å–≤–µ—â–µ–Ω–∏–µ|—Å—Ç–∞—Ç—É—Å)\s+(–Ω–∞|–≤)\s+',
        r'^(—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–≤–ª–∞–∂–Ω–æ—Å—Ç—å)\s+(–≤|–Ω–∞)\s+',
        r'^(—Å–≤–µ—Ç|–æ—Å–≤–µ—â–µ–Ω–∏–µ|—Å—Ç–∞—Ç—É—Å|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–≤–ª–∞–∂–Ω–æ—Å—Ç—å)\s*',
        r'^(–Ω–∞|–≤)\s+'
    ]
    for pat in patterns:
        query = re.sub(pat, '', query)
    if query.endswith('–µ'): query = query[:-1]
    if query.endswith('—É'): query = query[:-1]
    if query.endswith('–æ–º'): query = query[:-2]
    return query.strip()

def find_device_by_category(alias_name: str, preferred_categories: list = None):
    """–ù–∞—Ö–æ–¥–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
    aliases = load_aliases()
    if alias_name not in aliases:
        return None
    
    specs = aliases[alias_name]
    
    if preferred_categories:
        for spec in specs:
            if spec["category"] in preferred_categories:
                return spec
    
    return specs[0] if specs else None

def call_majordomo(method, path, data=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ MajorDoMo API."""
    url = f"{MAJORDOMO_URL}/api/{path}"
    try:
        if method == "POST":
            if isinstance(data, dict):
                resp = requests.post(url, json=data, timeout=10)
            else:
                resp = requests.post(url, data=data, timeout=10)
        else:
            resp = requests.get(url, timeout=10)
        return resp
    except Exception as e:
        logger.error(f"MajorDoMo API error: {e}")
        return None

def log_action(action, target, success=True, details=None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª."""
    try:
        os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
        record = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "source": "scheduler",
            "user": "system",
            "action": action,
            "target": target,
            "success": success,
            "details": details or {}
        }
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(record, ensure_ascii=False) + "\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

def send_telegram_error(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram."""
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": f"üö® –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:\n{message}",
            "parse_mode": "HTML"
        }
        requests.post(url, json=payload, timeout=5)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram: {e}")

def execute_task(task):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    try:
        action = task["action"]
        task_id = task.get("id", "unknown")
        description = task.get("description", task_id)
        
        if action["type"] == "device":
            device_name = action["device"].lower()
            norm_name = normalize_query(device_name)
            
            # –ò—â–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –æ—Å–≤–µ—â–µ–Ω–∏—è/—É—Å—Ç—Ä–æ–π—Å—Ç–≤
            dev = find_device_by_category(norm_name, ["–æ—Å–≤–µ—â–µ–Ω–∏–µ", "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"])
            
            if not dev:
                error_msg = f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {device_name}"
                logger.error(error_msg)
                log_action("device", device_name, success=False, details={"task_id": task_id, "error": error_msg})
                send_telegram_error(f"<b>–ó–∞–¥–∞—á–∞:</b> {description}\n{error_msg}")
                return
            
            value = "1" if action["state"].lower() in ("–≤–∫–ª—é—á–∏", "on", "1") else "0"
            resp = call_majordomo("POST", f"data/{dev['object']}.{dev['property']}", {"data": value})
            success = resp is not None and resp.status_code == 200
            
            if success:
                logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {description}")
                log_action("device", norm_name, success=True, details={"task_id": task_id, "state": "–≤–∫–ª—é—á–µ–Ω–æ" if value=="1" else "–≤—ã–∫–ª—é—á–µ–Ω–æ"})
            else:
                error_msg = f"MajorDoMo –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status_code if resp else 'N/A'}"
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {description} ‚Äî {error_msg}")
                log_action("device", norm_name, success=False, details={"task_id": task_id, "error": error_msg})
                send_telegram_error(f"<b>–ó–∞–¥–∞—á–∞:</b> {description}\n{error_msg}")

        elif action["type"] == "script":
            script_name = action["script"]
            resp = call_majordomo("GET", f"script/{script_name}")
            success = resp is not None and resp.status_code == 200
            
            if success:
                logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω: {script_name}")
                log_action("script", script_name, success=True, details={"task_id": task_id})
            else:
                error_msg = f"–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å {resp.status_code if resp else 'N/A'})"
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                log_action("script", script_name, success=False, details={"task_id": task_id, "error": error_msg})
                send_telegram_error(f"<b>–°—Ü–µ–Ω–∞—Ä–∏–π:</b> {script_name}\n{error_msg}")

    except Exception as e:
        error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        logger.exception(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")
        log_action("execute_task", task_id, success=False, details={"error": str(e)})
        send_telegram_error(f"<b>–ó–∞–¥–∞—á–∞:</b> {task.get('description', task_id)}\n{error_msg}")

def scheduler_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    last_check = None
    while True:
        now = datetime.now()
        current_min = now.strftime("%H:%M")
        current_day = now.strftime("%a").lower()[:3]  # "mon", "tue", ...

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        if current_min == last_check:
            time.sleep(30)
            continue

        try:
            if not os.path.exists(SCHEDULE_FILE):
                logger.warning(f"–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {SCHEDULE_FILE}")
                time.sleep(60)
                continue

            with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
                tasks = json.load(f)

            for task in tasks:
                if not task.get("enabled", True):
                    continue
                if task.get("time") == current_min and current_day in task.get("days", []):
                    logger.info(f"‚è∞ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {task.get('description', task['id'])}")
                    threading.Thread(target=execute_task, args=(task,)).start()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            log_action("scheduler_error", "schedule.json", success=False, details={"error": str(e)})

        last_check = current_min
        time.sleep(30)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler_loop()