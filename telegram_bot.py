#!/usr/bin/env python3
"""
Telegram-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MajorDoMo —á–µ—Ä–µ–∑ MCP-–ª–æ–≥–∏–∫—É.
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–ª–∏–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–æ–º–Ω–∞—Ç–∞ –æ—Ç–¥—ã—Ö–∞" –≤ –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏ –∫–æ–ª–æ–Ω–∫–∞—Ö).
–ö–æ–º–∞–Ω–¥—ã:
  /auth <–ø–∞—Ä–æ–ª—å>      ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  /light <–º–µ—Å—Ç–æ> <–≤–∫–ª—é—á–∏/–≤—ã–∫–ª—é—á–∏>
  /status <–º–µ—Å—Ç–æ>
  /script <–∏–º—è>
"""

import os
import json
import logging
import sys
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

sys.path.append("/opt/mcp-bridge")
from action_logger import log_action

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ü–æ–ª—É—á–∏ —É @BotFather
AUTHORIZED_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # –¢–≤–æ–π chat_id
AUTH_PASSWORD = os.getenv("TELEGRAM_AUTH_PASSWORD", "secret123")
MAJORDOMO_URL = "http://192.168.88.2"
ALIASES_FILE = "/opt/mcp-bridge/device_aliases.json"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
AUTHORIZED_USERS = set()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_aliases():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–ª–∏–∞—Å—ã –∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∫–ª—é—á–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"—É–ª–∏—Ü–∞": [spec1], "–∫–æ–º–Ω–∞—Ç–∞ –æ—Ç–¥—ã—Ö–∞": [spec_–æ—Å–≤–µ—â–µ–Ω–∏–µ, spec_–∫–æ–ª–æ–Ω–∫–∏]}
    """
    if not os.path.exists(ALIASES_FILE):
        return {}

    try:
        with open(ALIASES_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)

        aliases = {}
        for category, devices in raw.items():
            for key, spec in devices.items():
                names = [name.strip().lower() for name in key.split(",")]
                for name in names:
                    if name:
                        if name not in aliases:
                            aliases[name] = []
                        aliases[name].append({
                            "object": spec["object"],
                            "property": spec["property"],
                            "category": category
                        })
        return aliases
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–∏–∞—Å–æ–≤: {e}")
        return {}

def normalize_query(query: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–∞–ø—Ä–æ—Å (–∫–∞–∫ –≤ MCP-—Å–µ—Ä–≤–µ—Ä–µ)."""
    query = query.lower().strip()
    patterns = [
        r'^(—Å–≤–µ—Ç|–æ—Å–≤–µ—â–µ–Ω–∏–µ|—Å—Ç–∞—Ç—É—Å)\s+(–Ω–∞|–≤)\s+',
        r'^(—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–≤–ª–∞–∂–Ω–æ—Å—Ç—å)\s+(–≤|–Ω–∞)\s+',
        r'^(—Å–≤–µ—Ç|–æ—Å–≤–µ—â–µ–Ω–∏–µ|—Å—Ç–∞—Ç—É—Å|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–≤–ª–∞–∂–Ω–æ—Å—Ç—å)\s*',
        r'^(–Ω–∞|–≤)\s+'
    ]
    for pat in patterns:
        query = re.sub(pat, '', query)
    if query.endswith('–µ'): query = query[:-1]
    if query.endswith('—É'): query = query[:-1]
    if query.endswith('–æ–º'): query = query[:-2]
    return query.strip()

def find_device_by_category(alias_name: str, preferred_categories: list = None):
    """–ù–∞—Ö–æ–¥–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
    aliases = load_aliases()
    if alias_name not in aliases:
        return None
    
    specs = aliases[alias_name]
    
    if preferred_categories:
        for spec in specs:
            if spec["category"] in preferred_categories:
                return spec
    
    return specs[0] if specs else None

def call_majordomo(method, path, data=None, params=None):
    import requests
    url = f"{MAJORDOMO_URL}/api/{path}"
    try:
        if method == "POST":
            resp = requests.post(url, json=data, params=params, timeout=10)
        else:
            resp = requests.get(url, params=params, timeout=10)
        return resp
    except Exception as e:
        logger.error(f"MajorDoMo error: {e}")
        return None

async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth <–ø–∞—Ä–æ–ª—å>")
        return
    password = context.args[0]
    if password == AUTH_PASSWORD:
        AUTHORIZED_USERS.add(update.effective_chat.id)
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

async def light(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /auth <–ø–∞—Ä–æ–ª—å>")
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /light <–º–µ—Å—Ç–æ> <–≤–∫–ª—é—á–∏/–≤—ã–∫–ª—é—á–∏>")
        return
    
    location = " ".join(context.args[:-1]).lower()
    action = context.args[-1].lower()
    norm = normalize_query(location)
    
    # –ò—â–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è
    dev = find_device_by_category(norm, ["–æ—Å–≤–µ—â–µ–Ω–∏–µ"])
    
    if not dev:
        aliases = load_aliases()
        available = ", ".join(
            k for k, specs in aliases.items() 
            for spec in specs 
            if spec["category"] == "–æ—Å–≤–µ—â–µ–Ω–∏–µ"
        )
        await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available}")
        return
    
    value = "1" if action in ("–≤–∫–ª—é—á–∏", "on") else "0"
    resp = call_majordomo("POST", f"data/{dev['object']}.{dev['property']}", {"data": value})
    if resp and resp.status_code == 200:
        state = "–≤–∫–ª—é—á—ë–Ω" if value == "1" else "–≤—ã–∫–ª—é—á–µ–Ω"
        await update.message.reply_text(f"‚úÖ –°–≤–µ—Ç –≤ {norm} {state}")
        log_action(
            source="telegram",
            user=str(update.effective_user.id),
            action="control_device",
            target=norm,
            success=True,
            details={"state": state}
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ MajorDoMo")
        log_action(
            source="telegram",
            user=str(update.effective_user.id),
            action="control_device",
            target=norm,
            success=False,
            details={"error": "MajorDoMo error"}
        )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /auth <–ø–∞—Ä–æ–ª—å>")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <–º–µ—Å—Ç–æ>")
        return
    
    location = " ".join(context.args).lower()
    norm = normalize_query(location)
    
    # –ò—â–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –æ—Å–≤–µ—â–µ–Ω–∏—è/—É—Å—Ç—Ä–æ–π—Å—Ç–≤/–∫–ª–∏–º–∞—Ç–∞
    dev = find_device_by_category(norm, ["–æ—Å–≤–µ—â–µ–Ω–∏–µ", "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–∫–ª–∏–º–∞—Ç"])
    
    if not dev:
        await update.message.reply_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    resp = call_majordomo("GET", f"data/{dev['object']}.{dev['property']}")
    if resp and resp.status_code == 200:
        try:
            value = resp.json().get("data", resp.text.strip())
        except:
            value = resp.text.strip()
        
        if dev["category"] == "–∫–ª–∏–º–∞—Ç":
            msg = f"üå° {norm}: {value}¬∞C" if "temp" in dev["property"].lower() else f"üíß {norm}: {value}%"
        else:
            status = "–≤–∫–ª—é—á–µ–Ω–æ" if value == "1" else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
            msg = f"üí° {norm}: {status}"
        
        await update.message.reply_text(msg)
        log_action(
            source="telegram",
            user=str(update.effective_user.id),
            action="get_status",
            target=norm,
            success=True,
            details={"value": value}
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
        log_action(
            source="telegram",
            user=str(update.effective_user.id),
            action="get_status",
            target=norm,
            success=False,
            details={"error": "MajorDoMo error"}
        )

async def script(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /auth <–ø–∞—Ä–æ–ª—å>")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /script <–∏–º—è_—Å—Ü–µ–Ω–∞—Ä–∏—è>")
        return
    script_name = context.args[0]
    resp = call_majordomo("GET", f"script/{script_name}")
    if resp and resp.status_code == 200:
        await update.message.reply_text(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {script_name} –∑–∞–ø—É—â–µ–Ω")
        log_action(
            source="telegram",
            user=str(update.effective_user.id),
            action="run_script",
            target=script_name,
            success=True
        )
    else:
        await update.message.reply_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        log_action(
            source="telegram",
            user=str(update.effective_user.id),
            action="run_script",
            target=script_name,
            success=False,
            details={"error": "MajorDoMo error"}
        )

def main():
    if not TELEGRAM_TOKEN:
        logger.error("–ó–∞–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN")
        return
    
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("auth", auth))
    app.add_handler(CommandHandler("light", light))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("script", script))
    
    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()